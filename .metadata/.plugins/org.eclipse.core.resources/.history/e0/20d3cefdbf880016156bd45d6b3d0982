package aStarAlg;

import java.util.Comparator;
import java.util.List;

public abstract class PathFinding {
	//******* need to change ********
	private Comparator<Cell> cellSorter = new Comparator<Cell>(){
		public int compare(Cell arg0, Cell arg1){
			if(arg1.fCost() < arg0.fCost()) return +1;
			if(arg1.fCost() > arg0.fCost()) return -1;
			return 0;
		}
	}; 
	
	private boolean pointInList(List<Cell> list, Point p){
		for (Cell n : list) {
			if(n.point.equals(p)) return true;
		}
		return false;
	}
	
	public abstract List<Cell> PathFinding(Map map, Point Start, Point Goal);
	
	private double getgCost(Point x , Point y){
		//=====================================================move diagonally=================================================
		if (Math.abs(x.x-y.x)==1 && Math.abs(x.y-y.y)==1){
			//*******from 2 to others*********
			//// travel between hard to traverse cells
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='2') return Math.sqrt(8);
			//// travel from htt to unblocked
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='1') return Math.sqrt(2)/2+Math.sqrt(8)/2;
			//// travel from htt to unblocked highway
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='a') return Math.sqrt(2)/2+Math.sqrt(8)/2;
			//// travel from htt to htt highway
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='b') return Math.sqrt(8);
			//// travel from htt to blocked
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='0') return 1000;
			//*******from 1 to others*********
			//// travel between hard to traverse cells
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='2') return Math.sqrt(2)/2+Math.sqrt(8)/2;
			//// travel from htt to unblocked
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='1') return Math.sqrt(2);
			//// travel from htt to unblocked highway
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='a') return Math.sqrt(2);
			//// travel from htt to htt highway
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='b') return Math.sqrt(2)/2+Math.sqrt(8)/2;
			//// travel from htt to blocked
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='0') return 1000;
			//*******from b to others*********
			//// travel between hard to traverse cells
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='2') return Math.sqrt(8);
			//// travel from htt to unblocked
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='1') return Math.sqrt(2)/2+Math.sqrt(8)/2;
			//// travel from htt to unblocked highway
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='a') return Math.sqrt(2)/2+Math.sqrt(8)/2;
			//// travel from htt to htt highway
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='b') return Math.sqrt(8);
			//// travel from htt to blocked
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='0') return 1000;
			//*******from a to others*********
			//// travel between hard to traverse cells
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='2') return Math.sqrt(2)/2+Math.sqrt(8)/2;
			//// travel from htt to unblocked
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='1') return Math.sqrt(2);
			//// travel from htt to unblocked highway
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='a') return Math.sqrt(2);
			//// travel from htt to htt highway
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='b') return Math.sqrt(2)/2+Math.sqrt(8)/2;
			//// travel from htt to blocked
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='0') return 1000;		
		}else{
			//==========================================move horizontally or vertically=================================================
			//*******from 2 to others*********
			//// travel between hard to traverse cells
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='2') return 2;
			//// travel from htt to unblocked
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='1') return 1.5;
			//// travel from htt to unblocked highway
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='a') return 1.5;
			//// travel from htt to htt highway
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='b') return 2;
			//// travel from htt to blocked
			if(cell[x.x][x.y].type=='2'&& cell[y.x][y.y].type=='0') return 1000;
			//*******from 1 to others*********
			//// travel between hard to traverse cells
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='2') return 1.5;
			//// travel from htt to unblocked
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='1') return Math.sqrt(2);
			//// travel from htt to unblocked highway
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='a') return Math.sqrt(2);
			//// travel from htt to htt highway
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='b') return 1.5;
			//// travel from htt to blocked
			if(cell[x.x][x.y].type=='1'&& cell[y.x][y.y].type=='0') return 1000;
			//*******from b to others*********
			//// travel between hard to traverse cells
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='2') return 2;
			//// travel from htt to unblocked
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='1') return 1.5;
			//// travel from htt to unblocked highway
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='a') return 1.5;
			//// travel from htt to htt highway
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='b') return 2;
			//// travel from htt to blocked
			if(cell[x.x][x.y].type=='b'&& cell[y.x][y.y].type=='0') return 1000;
			//*******from a to others*********
			//// travel between hard to traverse cells
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='2') return 1.5;
			//// travel from htt to unblocked
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='1') return Math.sqrt(2);
			//// travel from htt to unblocked highway
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='a') return Math.sqrt(2);
			//// travel from htt to htt highway
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='b') return 1.5;
			//// travel from htt to blocked
			if(cell[x.x][x.y].type=='a'&& cell[y.x][y.y].type=='0') return 1000;		
		}

		return 1000;
	}
	
	private double gethCost(Point x, Point Goal){
		double dx = x.x-Goal.x;
		double dy = x.y-Goal.y;
		return Math.sqrt(dx*dx + dy*dy);
	}
}
